# Determines how much larger the asynchronously painted image should be compared with the visible view.
# The extra image data is used when panning and zooming.
# This creates a quasi-synchronous user experience when the resulting view is covered by the image.
# A large asynchronous image, however, increases the asynchronous painting time.
#
# The size of the extra border area is expressed as a factor of the original view's dimensions.
# E.g. a value of 0.25 will paint a border that adds 25% to each view's side, and thus bring
# the dimensions of the painted area to (1+0.25+0.25)*width by (1+0.25+0.25)*height.
# For a view of size 800*600 pixels, this increases the total area to paint to
# 1200*900, which is more than double the original amount of pixels.
# The default value for this property is 0.025, which will add 2.5% to each view's side
TLcyAsynchronousPaintAddOn.borderFactor = 0.025

# Determines how many milliseconds to wait for asynchronous painting to complete before returning from a synchronous
# view repaint.
# If the painting completes before the specified time elapses, the results are immediately used.
# A value of 0ms ensures that view paints are handled as quick as possible. A value of 25ms will make fast
# layers seem to be painted synchronously, while still maintaining a responsive view.      
TLcyAsynchronousPaintAddOn.synchronousDelay = 25

# Specifies how many milliseconds to wait before re-displaying skipped content. Synchronously painted content
# (usually labels) is skipped while the involved layer is being painted asynchronously.
# A value of 500ms avoids flicker without letting the user wait too long for the content to re-appear.
TLcyAsynchronousPaintAddOn.labelSkipDelay = 500

# Specifies the thread priority to use when the paint hints do not specify it
TLcyAsynchronousPaintAddOn.threadPriority = 5
